# -*- coding: utf-8 -*-
"""Accuracy-of-GANs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zT5Z-ndygX-9ekhpPQY9c6PR3ENyBXYG
"""

#Imports and models assigned
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
knn = KNeighborsClassifier()
scaler = MinMaxScaler()
lr = LogisticRegression()
rfc = RandomForestClassifier(n_estimators=50)

#All train and test data of all GANs

#CGAN
#Train
cgan_real_train = np.array([49, 12, -71, -129, -126, -135, -120, -133, -122, -114, -122, -110, -126, -122, -121, -135, -123, -134, -127, -112, -125, -135, -137, -126, -148, -134, -135, -131, -128, -132, -146, -145, -130, -148, -138, -135, -130, -155, -144, -174, -155, -142, -142, -158, -157, -147, -156, -152, -139, -149, -159, -168, -144, -160, -155, -158, -157, -154, -139, -166, -175, -181, -140, -164, -168, -161, -174, -181, -165, -150, -164, -157, -151, -170, -165, -163, -164, -159, -160, -169, -149, -158, -171, -131, -169, -147, -137, -134, -140, -149, -167, -149, -165, -148, -155, -144, -116, -156, -144, -158, -159, -170, -155, -164, -168, -155, -140, -160, -160, -163, -160, -121, -161, -141, -150, -157, -166, -159, -147, -155])
cgan_fake_train = np.array([-113, -158, -164, -182, -176, -172, -156, -161, -151, -143, -146, -136, -154, -152, -150, -166, -156, -158, -158, -150, -156, -159, -166, -160, -168, -167, -160, -170, -162, -165, -178, -178, -165, -180, -167, -181, -171, -189, -179, -200, -187, -178, -179, -182, -184, -189, -190, -182, -178, -178, -187, -198, -181, -203, -185, -188, -185, -186, -178, -200, -201, -206, -191, -192, -203, -193, -198, -213, -198, -183, -197, -184, -193, -193, -196, -201, -195, -194, -187, -198, -197, -192, -196, -193, -198, -176, -175, -189, -178, -185, -191, -183, -189, -180, -193, -178, -173, -186, -189, -182, -194, -194, -183, -195, -195, -187, -184, -192, -188, -198, -188, -174, -199, -171, -185, -191, -186, -181, -177, -189])
#Test
cgan_real_test = np.array([65, -7, -66, -113, -108, -93, -114, -111, -121, -111, -124, -118, -114, -100, -105, -112, -117, -130, -124, -112, -126, -125, -115, -138, -139, -113, -141, -137, -111, -124, -124, -140, -130, -122, -142, -138, -152, -153, -140, -150, -159, -139, -141, -133, -147, -141, -156, -153, -159, -176, -153, -165, -169, -177, -168, -151, -164, -173, -129, -174, -156, -170, -155, -163, -132, -140, -157, -145, -157, -180, -165, -173, -199, -170, -175, -159, -180, -181, -183, -187, -153, -183, -181, -163, -192, -192, -171, -170, -180, -176, -165, -175, -175, -170, -173, -176, -185, -183, -189, -148, -173, -168, -162, -166, -176, -151, -165, -155, -153, -171, -185, -163, -153, -179, -167, -173, -179, -165, -163, -167])
cgan_fake_test = np.array([-126, -143, -154, -162, -158, -155, -142, -147, -142, -140, -151, -146, -148, -132, -147, -145, -154, -159, -154, -148, -161, -151, -152, -173, -171, -156, -172, -177, -162, -158, -167, -169, -168, -165, -174, -169, -174, -186, -172, -181, -184, -173, -182, -173, -169, -180, -182, -196, -196, -201, -185, -193, -193, -209, -205, -198, -192, -200, -179, -196, -189, -196, -181, -197, -180, -181, -193, -193, -199, -205, -210, -200, -222, -199, -209, -192, -206, -203, -216, -212, -196, -214, -207, -197, -218, -219, -215, -208, -216, -203, -208, -201, -206, -205, -213, -203, -217, -202, -215, -196, -205, -199, -195, -209, -208, -191, -195, -185, -198, -201, -206, -191, -184, -204, -193, -200, -210, -201, -206, -205])

#DCGAN
#Train
dcgan_real_train = np.array([1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
dcgan_fake_train = np.array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
#Test
dcgan_real_test = np.array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
dcgan_fake_test = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

#VSGAN
#Train
vsgan_real_train = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
vsgan_fake_train = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
#Test
vsgan_real_test = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
vsgan_fake_test = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

#WGAN
#Train
wgan_real_train = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0])
wgan_fake_train = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1])
#Test
wgan_real_test = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0])
wgan_fake_test = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1])

#WGAN-GP
#Train
wgangp_real_train = np.array([46, -31, -25, -85, -84, -80, -82, -71, -79, -60, -76, -73, -52, -82, -60, -83, -74, -76, -80, -89, -87, -95, -88, -85, -104, -99, -103, -103, -98, -85, -79, -83, -110, -98, -91, -111, -111, -92, -90, -111, -112, -123, -94, -107, -113, -120, -103, -117, -117, -112, -121, -102, -117, -112, -123, -94, -122, -126, -104, -126, -125, -110, -140, -120, -134, -135, -123, -153, -142, -129, -139, -125, -104, -120, -139, -147, -132, -159, -131, -143, -137, -156, -163, -147, -162, -158, -149, -161, -149, -180, -136, -180, -154, -175, -165, -190, -170, -178, -172, -177, -180, -161, -159, -190, -176, -199, -177, -183, -175, -185, -152, -182, -175, -193, -201, -184, -165, -195, -181, -183])
wgangp_fake_train = np.array([-112, -130, -139, -125, -119, -119, -106, -101, -105, -104, -110, -105, -97, -116, -98, -117, -106, -112, -113, -117, -119, -121, -118, -114, -132, -128, -133, -138, -129, -126, -126, -126, -143, -134, -121, -141, -138, -126, -129, -131, -139, -142, -132, -133, -145, -152, -139, -147, -147, -143, -151, -140, -152, -140, -153, -154, -148, -158, -158, -163, -170, -150, -167, -159, -160, -161, -150, -175, -162, -157, -169, -171, -161, -150, -169, -172, -168, -189, -170, -183, -175, -183, -193, -175, -181, -191, -187, -190, -194, -194, -185, -214, -190, -204, -191, -215, -200, -203, -199, -200, -204, -198, -188, -216, -220, -232, -204, -215, -207, -213, -193, -226, -212, -216, -227, -211, -209, -224, -207, -206])
#Test
wgangp_real_test = np.array([44, -9, -38, -43, -79, -77, -51, -63, -50, -58, -59, -58, -52, -73, -64, -67, -42, -63, -65, -67, -58, -76, -66, -82, -82, -77, -64, -81, -80, -46, -79, -88, -89, -88, -66, -94, -77, -108, -108, -80, -98, -100, -86, -106, -104, -105, -71, -115, -78, -123, -118, -114, -103, -86, -114, -78, -132, -107, -128, -110, -108, -100, -106, -141, -118, -126, -111, -108, -127, -116, -122, -103, -141, -127, -124, -142, -128, -111, -131, -136, -130, -145, -130, -125, -134, -141, -128, -130, -99, -135, -116, -128, -124, -157, -128, -140, -139, -133, -129, -151, -142, -149, -140, -151, -155, -167, -172, -149, -158, -161, -149, -165, -155, -166, -165, -175, -167, -179, -160, -167])
wgangp_fake_test = np.array([-112, -129, -116, -121, -124, -114, -103, -98, -86, -91, -92, -92, -91, -100, -96, -94, -88, -94, -97, -98, -95, -110, -105, -108, -108, -109, -97, -102, -110, -95, -114, -112, -114, -121, -118, -119, -119, -139, -127, -120, -130, -121, -119, -126, -131, -136, -122, -134, -128, -148, -147, -136, -141, -125, -137, -141, -156, -149, -153, -143, -145, -144, -143, -162, -146, -159, -143, -152, -151, -159, -146, -143, -161, -154, -154, -167, -170, -149, -169, -171, -154, -172, -167, -165, -168, -168, -172, -167, -158, -166, -152, -157, -165, -190, -175, -167, -171, -163, -163, -175, -174, -170, -178, -183, -192, -197, -197, -183, -199, -191, -188, -188, -192, -192, -195, -204, -202, -204, -194, -201])

#raw data pre-processing for CGAN and WGAN-GP
def data_conv(real_arr,fake_arr):
  rs = real_arr.reshape(12,10)
  fs = fake_arr.reshape(12,10)
  rs_fittran = scaler.fit_transform(rs)
  fs_fittran = scaler.fit_transform(fs)
  r_bin = []
  f_bin = []
  for i in range(len(rs_fittran)):
    for j in range(len(rs_fittran[0])):
      r_bin.append(int(rs_fittran[i][j]))
      f_bin.append(int(fs_fittran[i][j]))
  r_bin_np = np.array(r_bin)
  f_bin_np = np.array(f_bin)
  return (r_bin_np,f_bin_np)

cgan_real_train_rs,cgan_fake_train_rs = data_conv(cgan_real_train,cgan_fake_train)
cgan_real_test_rs,cgan_fake_test_rs = data_conv(cgan_real_test,cgan_fake_test)

wgangp_real_train_rs,wgangp_fake_train_rs = data_conv(wgangp_real_train,wgangp_fake_train)
wgangp_real_test_rs,wgangp_fake_test_rs = data_conv(wgangp_real_test,wgangp_fake_test)

#reshaping CGAN, DCGAN, VSGAN, WGAN and WGAN-GP data
cgan_real_train_dc = cgan_real_train_rs.reshape(12,10)
cgan_fake_train_dc = cgan_fake_train_rs.reshape(12,10)
cgan_real_test_dc = cgan_real_test_rs.reshape(12,10)
cgan_fake_test_dc = cgan_fake_test_rs.reshape(12,10)

dcgan_real_train_rs = dcgan_real_train.reshape(16,10)
dcgan_fake_train_rs = dcgan_fake_train.reshape(16,10)
dcgan_real_test_rs = dcgan_real_test.reshape(16,10)
dcgan_fake_test_rs = dcgan_fake_test.reshape(16,10)

vsgan_real_train_rs = vsgan_real_train.reshape(10,4)
vsgan_fake_train_rs = vsgan_fake_train.reshape(10,4)
vsgan_real_test_rs = vsgan_real_test.reshape(10,4)
vsgan_fake_test_rs = vsgan_fake_test.reshape(10,4)

wgan_real_train_rs = wgan_real_train.reshape(12,10)
wgan_fake_train_rs = wgan_fake_train.reshape(12,10)
wgan_real_test_rs = wgan_real_test.reshape(12,10)
wgan_fake_test_rs = wgan_fake_test.reshape(12,10)

wgangp_real_train_dc = wgangp_real_train_rs.reshape(12,10)
wgangp_fake_train_dc = wgangp_fake_train_rs.reshape(12,10)
wgangp_real_test_dc = wgangp_real_test_rs.reshape(12,10)
wgangp_fake_test_dc = wgangp_fake_test_rs.reshape(12,10)

#KNearestNeighbors-knn

#CGAN
knn.fit(cgan_real_train_dc,cgan_fake_train_dc)
cgan_train_acc_knn = knn.score(cgan_real_train_dc,cgan_fake_train_dc)
knn.fit(cgan_real_test_dc,cgan_fake_test_dc)
cgan_test_acc_knn = knn.score(cgan_real_test_dc,cgan_fake_test_dc)
print(f'CGAN KNN Accuracies: train- {cgan_train_acc_knn:.3f} and test- {cgan_test_acc_knn:.3f}')

#DCGAN
knn.fit(dcgan_real_train_rs,dcgan_fake_train_rs)
dcgan_train_acc_knn = knn.score(dcgan_real_train_rs,dcgan_fake_train_rs)
knn.fit(dcgan_real_test_rs,dcgan_fake_test_rs)
dcgan_test_acc_knn = knn.score(dcgan_real_test_rs,dcgan_fake_test_rs)
print(f'DCGAN KNN Accuracies: train- {dcgan_train_acc_knn} and test- {dcgan_test_acc_knn:.3f}')

#VSGAN
knn.fit(vsgan_real_train_rs,vsgan_fake_train_rs)
vsgan_train_acc_knn = knn.score(vsgan_real_train_rs,vsgan_fake_train_rs)
knn.fit(vsgan_real_test_rs,vsgan_fake_test_rs)
vsgan_test_acc_knn = knn.score(vsgan_real_test_rs,vsgan_fake_test_rs)
print(f'VSGAN KNN Accuracies: train- {vsgan_train_acc_knn} and test- {vsgan_test_acc_knn}')

#WGAN
knn.fit(wgan_real_train_rs,wgan_fake_train_rs)
wgan_train_acc_knn = knn.score(wgan_real_train_rs,wgan_fake_train_rs)
knn.fit(wgan_real_test_rs,wgan_fake_test_rs)
wgan_test_acc_knn = knn.score(wgan_real_test_rs,wgan_fake_test_rs)
print(f'WGAN KNN Accuracies: train- {wgan_train_acc_knn:.3f} and test- {wgan_test_acc_knn}')

#WGAN-GP
knn.fit(wgangp_real_train_dc,wgangp_fake_train_dc)
wgangp_train_acc_knn = knn.score(wgangp_real_train_dc,wgangp_fake_train_dc)
knn.fit(wgangp_real_test_dc,wgangp_fake_test_dc)
wgangp_test_acc_knn = knn.score(wgangp_real_test_dc,wgangp_fake_test_dc)
print(f'WGAN-GP KNN Accuracies: train- {wgangp_train_acc_knn} and test- {wgangp_test_acc_knn:.3f}')

#Regression

#CGAN
cg = cgan_real_train_rs.reshape(120,1)
lr.fit(cg,cgan_fake_train_rs)
cg2 = cgan_real_test_rs.reshape(120,1)
cgan_preds = lr.predict(cg2)
cgan_reg_acc = accuracy_score(cgan_fake_test_rs,cgan_preds)
print(f'CGAN Regression Accuracy: {cgan_reg_acc}')

#DCGAN
dg = dcgan_real_train_rs.reshape(160,1)
lr.fit(dg,dcgan_fake_train)
dg2 = dcgan_real_test_rs.reshape(160,1)
dcgan_preds = lr.predict(dg2)
dcgan_reg_acc = accuracy_score(dcgan_fake_test,dcgan_preds)
print(f'DCGAN Regression Accuracy: {dcgan_reg_acc}')

#VSGAN
vsgan_real_train[0] = 0
vsgan_fake_train[0] = 1
vsgan_real_test[0] = 0
vsgan_fake_test[0] = 1
vg = vsgan_real_train_rs.reshape(40,1)
lr.fit(vg,vsgan_fake_train)
vg2 = vsgan_real_test_rs.reshape(40,1)
vsgan_preds = lr.predict(vg2)
vsgan_reg_acc = accuracy_score(vsgan_fake_test,vsgan_preds)
print(f'VSGAN Regression Accuracy: {vsgan_reg_acc}')

#WGAN
wg = wgan_real_train_rs.reshape(120,1)
lr.fit(wg,wgan_fake_train)
wg2 = wgan_real_test_rs.reshape(120,1)
wgan_preds = lr.predict(wg2)
wgan_reg_acc = accuracy_score(wgan_fake_test,wgan_preds)
print(f'WGAN Regression Accuracy: {wgan_reg_acc:.3f}')

#WGAN-GP
wggp = wgangp_real_train_rs.reshape(120,1)
lr.fit(wggp,wgangp_fake_train_rs)
wggp2 = wgangp_real_test_rs.reshape(120,1)
wgangp_preds = lr.predict(wggp2)
wgangp_reg_acc = accuracy_score(wgangp_fake_test_rs,wgangp_preds)
print(f'WGAN-GP Regression Accuracy: {wgangp_reg_acc:.3f}')

#RandomForestClassifier-rfc

#CGAN
rfc.fit(cgan_real_train_dc,cgan_fake_train_dc)
cgan_train_acc_rfc = rfc.score(cgan_real_train_dc,cgan_fake_train_dc)
rfc.fit(cgan_real_test_dc,cgan_fake_test_dc)
cgan_test_acc_rfc = rfc.score(cgan_real_test_dc,cgan_fake_test_dc)
print(f'CGAN RFC Accuracies: train - {cgan_train_acc_rfc}, test - {cgan_test_acc_rfc:}')

#DCGAN
rfc.fit(dcgan_real_train_rs,dcgan_fake_train_rs)
dcgan_train_acc_rfc = rfc.score(dcgan_real_train_rs,dcgan_fake_train_rs)
rfc.fit(dcgan_real_test_rs,dcgan_fake_test_rs)
dcgan_test_acc_rfc = rfc.score(dcgan_real_test_rs,dcgan_fake_test_rs)
print(f'DCGAN RFC Accuracies: train - {dcgan_train_acc_rfc:.3f}, test - {dcgan_test_acc_rfc}')

#VSGAN
rfc.fit(vsgan_real_train_rs,vsgan_fake_train_rs)
vsgan_train_acc_rfc = rfc.score(vsgan_real_train_rs,vsgan_fake_train_rs)
rfc.fit(vsgan_real_test_rs,vsgan_fake_test_rs)
vsgan_test_acc_rfc = rfc.score(vsgan_real_test_rs,vsgan_fake_test_rs)
print(f'VSGAN RFC Accuracies: train - {vsgan_train_acc_rfc}, test - {vsgan_test_acc_rfc}')

#WGAN
rfc.fit(wgan_real_train_rs,wgan_fake_train_rs)
wgan_train_acc_rfc = rfc.score(wgan_real_train_rs,wgan_fake_train_rs)
rfc.fit(wgan_real_test_rs,wgan_fake_test_rs)
wgan_test_acc_rfc = rfc.score(wgan_real_test_rs,wgan_fake_test_rs)
print(f'WGAN RFC Accuracies: train - {wgan_train_acc_rfc:.3f}, test - {wgan_test_acc_rfc:.3f}')

#WGAN-GP
rfc.fit(wgangp_real_train_dc,wgangp_fake_train_dc)
wgangp_train_acc_rfc = rfc.score(wgangp_real_train_dc,wgangp_fake_train_dc)
rfc.fit(wgangp_real_test_dc,wgangp_fake_test_dc)
wgangp_test_acc_rfc = rfc.score(wgangp_real_test_dc,wgangp_fake_test_dc)
print(f'WGAN-GP RFC Accuracies: train - {wgangp_train_acc_rfc:.3f}, test - {wgangp_test_acc_rfc:}')

#All graphical data outputs given below

#KNearestNeighbor
fig = plt.figure()
axes = fig.add_axes([0,0,1,1])
train = [cgan_train_acc_knn,dcgan_train_acc_knn,vsgan_train_acc_knn,wgan_train_acc_knn,wgangp_train_acc_knn]
test = [cgan_test_acc_knn,dcgan_test_acc_knn,vsgan_test_acc_knn,wgan_test_acc_knn,wgangp_test_acc_knn]
gan_names = ['CGAN','DCGAN','VSGAN','WGAN','WGAN-GP']
x = np.arange(len(gan_names))
plt.bar(x - 0.1, train, 0.2, label = 'train',color='red')
plt.bar(x + 0.1, test, 0.2, label = 'test',color='blue')
plt.xticks(x, gan_names)
plt.xlabel("GAN Architectures")
plt.ylabel("Accuracy")
plt.title("Accuracy of Each Architecture Using KNN")
plt.legend(loc=[1.02,0.9])
plt.show()

#Regression
fig2 = plt.figure()
axes = fig2.add_axes([0,0,1,1])
reg_accs = [cgan_reg_acc,dcgan_reg_acc,vsgan_reg_acc,wgan_reg_acc,wgangp_reg_acc]
gan_names = [f'CGAN-{cgan_reg_acc}',f'DCGAN-{dcgan_reg_acc}',f'VSGAN-{vsgan_reg_acc}',f'WGAN-{wgan_reg_acc:.3f}',f'WGAN-GP-{wgangp_reg_acc:.3f}']
x = np.arange(len(gan_names))
plt.bar(x, reg_accs, 0.4, label = 'Accuracy',color='green')
plt.xticks(x, gan_names)
plt.xlabel("GAN Architectures With Accuracy Values")
plt.ylabel("Accuracy")
plt.title("Accuracy of Each Architecture Using Regression")
plt.legend(loc=[1.02,0.95])
plt.show()

#RandomForestClassifier
fig3 = plt.figure()
axes = fig3.add_axes([0,0,1,1])
train = [cgan_train_acc_rfc,dcgan_train_acc_rfc,vsgan_train_acc_rfc,wgan_train_acc_rfc,wgangp_train_acc_rfc]
test = [cgan_test_acc_rfc,dcgan_test_acc_rfc,vsgan_test_acc_rfc,wgan_test_acc_rfc,wgangp_test_acc_rfc]
gan_names = ['CGAN','DCGAN','VSGAN','WGAN','WGAN-GP']
x = np.arange(len(gan_names))
plt.bar(x - 0.1, train, 0.2, label = 'train',color='limegreen')
plt.bar(x + 0.1, test, 0.2, label = 'test',color = 'navy')
plt.xticks(x, gan_names)
plt.xlabel("GAN Architectures")
plt.ylabel("Accuracy")
plt.title("Accuracy of Each Architecture Using RFC")
plt.legend(loc=[1.02,0.9])
plt.show()

# Total Accuracy out of 5
fig4 = plt.figure()
axes = fig4.add_axes([0,0,1,1])
total_accs = [4.591,3.699,4.975,3.741,4.433]
gan_names = [f'CGAN-{total_accs[0]}',f'DCGAN-{total_accs[1]}',f'VSGAN-{total_accs[2]}',f'WGAN-{total_accs[3]}',f'WGAN-GP-{total_accs[4]}']
x = np.arange(len(gan_names))
plt.bar(x, total_accs, 0.4, label = 'Total Accuracy',color='orange')
plt.xticks(x, gan_names)
plt.xlabel("GAN Architectures With Total Accuracy Values")
plt.ylabel("Total Accuracy")
plt.title("Total Accuracy of Each Architecture Out of 5")
plt.legend(loc=[1.02,0.95])
plt.show()